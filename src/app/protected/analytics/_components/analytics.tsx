"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useState } from "react";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import PageLayout from "@/components/shared/pageLayout";
import { Card } from "@/components/ui/card";
import { Sparkles, LoaderCircle } from "lucide-react";
import { Toaster } from "@/components/ui/toaster";
import { Classification } from "./classfication";

const FormSchema = z.object({
  comentario: z
    .string()
    .min(1, {
      message: "O coment√°rio deve ter pelo menos 1 caracteres.",
    })
    .max(500, {
      message: "A coment√°rio n√£o deve ter mais de 500 caracteres.",
    })
    .nonempty({
      message: "A coment√°rio √© obrigat√≥ria.",
    }),
});

const useFetchAnalysis = () => {
  const fetchAnalysis = async (prompt: string) => {
    try {
      const response = await fetch(process.env.NEXT_PUBLIC_AI_URL as string, {
        method: "POST",
        body: JSON.stringify({
          model: "gemma2",
          stream: false,
          messages: [
            {
              role: "user",
              content: prompt,
            },
          ],
        }),
        headers: {
          "Content-Type": "application/json",
        },
      });

      const data = await response.json();
      const resposta = data.choices[0].message.content;

      // Extrair o JSON da string retornada procurando pelas chaves {}
      const jsonMatch = resposta.match(/{[\s\S]*}/);
      if (!jsonMatch) {
        console.error("Error fetching data: No JSON match found");
        return null;
      }

      const jsonString = jsonMatch[0].trim();
      return JSON.parse(jsonString);
    } catch (error) {
      console.error("Error fetching data:", error);
      return null;
    }
  };

  return fetchAnalysis;
};

const getPrompt = (comentario: string): string => {
  return `
Voc√™ √© um especialista em an√°lise de sentimentos. Analise o texto entre colchetes [ ]
Considere os seguintes aspectos lingu√≠sticos, com a porcentagem indicando a import√¢ncia de cada aspecto para a an√°lise de sentimento:

L√©xico Emocional (25%)
Identifique palavras que expressam sentimentos:
Positivo: Palavras como "feliz", "excelente", "fant√°stico".
Neutro: Palavras informativas, como "adequado", "mediano".
Negativo: Palavras como "triste", "horr√≠vel", "fracasso".

Contexto Lingu√≠stico (20%)
Considere como o contexto altera o sentimento das palavras:
Positivo: Uso de ironia positiva ("Claro que estou super feliz com isso!" expressando felicidade).
Neutro: Ironia sem carga emocional significativa ("Muito t√≠pico").
Negativo: Sarcasmo negativo ("Claro, isso foi t√£o √∫til" com inten√ß√£o negativa).

Intensidade Emocional (15%)
Avalie a for√ßa das emo√ß√µes no texto:
Positivo: Intensificadores de emo√ß√µes positivas ("extremamente feliz").
Neutro: Emo√ß√µes de pouca intensidade ("levemente contente").
Negativo: Intensificadores de emo√ß√µes negativas ("completamente horr√≠vel").

Sintaxe e Estrutura da Frase (10%)
A constru√ß√£o da frase pode influenciar o sentimento:
Positivo: Frases que transmitem satisfa√ß√£o ("Foi uma experi√™ncia incr√≠vel").
Neutro: Frases descritivas e objetivas ("O evento ocorreu √†s 18 horas").
Negativo: Frases que expressam frustra√ß√£o ("Isso foi um desperd√≠cio de tempo").

Contexto Cultural e Temporal (10%)
Considere o impacto cultural e temporal nas express√µes:
Positivo: Termos com conota√ß√£o positiva em contextos atuais ("√©pico" significando algo muito bom).
Neutro: Palavras com significado literal e neutro.
Negativo: Termos com conota√ß√£o negativa ou desatualizada.

Uso de Emojis e Emoticons (5%)
Emojis podem modificar o tom emocional:
Positivo: Emojis de felicidade ou aprova√ß√£o (üòä, üëç).
Neutro: Emojis sem carga emocional significativa (üîÑ, üîç).
Negativo: Emojis de tristeza ou desaprova√ß√£o (üòû, üëé).

Marcadores Discursivos (5%)
Identifique palavras que mudam o tom ou introduzem novas ideias:
Positivo: Marcadores de emo√ß√£o positiva ("excelente").
Neutro: Marcadores de transi√ß√£o ("no entanto").
Negativo: Marcadores de desapontamento ("infelizmente").

Polaridade e Multiplicidade de Sentimentos (5%)
Detecte a presen√ßa de m√∫ltiplos sentimentos no texto:
Positivo: Sentimentos positivos predominantes em contextos mistos.
Neutro: Equil√≠brio ou ambiguidade emocional.
Negativo: Sentimentos negativos predominantes.

Refer√™ncias a Entidades Nomeadas e Relacionamentos (5%)
O modo como entidades s√£o mencionadas pode alterar o sentimento:
Positivo: Mencionar entidades de forma elogiosa ("A Apple fez um trabalho excelente").
Neutro: Refer√™ncias neutras ou informativas.
Negativo: Mencionar entidades de forma cr√≠tica ("O governo falhou miseravelmente").

Estilo de Linguagem e Tom (5%)
A tonalidade geral do texto pode impactar a percep√ß√£o emocional:
Positivo: Linguagem otimista.
Neutro: Estilo informativo ou descritivo.
Negativo: Linguagem pessimista ou cr√≠tica.

Objetividade e Neutralidade (5%)
Avalie se o texto √© imparcial ou inclinado:
Positivo: Fatos com leve inclina√ß√£o positiva.
Neutro: Fatos estritamente objetivos.
Negativo: Fatos com leve inclina√ß√£o negativa.

Entona√ß√£o e Pros√≥dia (em Texto Falado) (5%)
Considere como a entona√ß√£o pode influenciar o sentimento:
Positivo: Entona√ß√£o alegre ou excitada.
Neutro: Entona√ß√£o neutra e equilibrada.
Negativo: Entona√ß√£o triste ou irritada.

Texto: [${comentario}]

Formato de retorno em json:
N√£o retorne nada a mais al√©m do solicitado, somente o json.
{
  "sentiment": "promoter" | "neutral" | "detractor",
}
  `;
};

export function Analytics() {
  const [status, setStatus] = useState<
    "Promotor" | "Neutro" | "Detrator" | "Loading"
  >("Promotor");
  const [loading, setLoading] = useState<boolean>(false);
  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
  });
  const fetchAnalysis = useFetchAnalysis();

  const onSubmit = async (data: z.infer<typeof FormSchema>) => {
    const prompt = getPrompt(data.comentario);
    setLoading(true);
    setStatus("Loading");
    const iaResponse = await fetchAnalysis(prompt);
    setLoading(false);

    if (iaResponse) {
      console.log("Response Data:", iaResponse);
      setStatus(
        iaResponse.sentiment === "promoter"
          ? "Promotor"
          : iaResponse.sentiment === "neutral"
          ? "Neutro"
          : "Detrator"
      );
    } else {
      setStatus("Promotor"); // Default status if no response
    }
  };

  return (
    <PageLayout>
      <Toaster />
      <div className="flex items-center justify-between">
        <h1 className="text-lg font-semibold md:text-2xl">Analytics</h1>
      </div>
      <Card className="p-4 grid gap-4 sm:grid-cols-1 lg:grid-cols-5 lg:grid-rows-1 ">
        <div className="lg:col-span-4">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="comentario"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Coment√°rio do usu√°rio</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Estou amando a nova funcionalidade de an√°lise de dados!"
                        className="resize-none h-[150px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button
                type="submit"
                className="flex gap-2 w-full"
                disabled={loading}
              >
                {loading ? (
                  <>
                    <LoaderCircle className="animate-spin h-4 w-4" />
                    Carregando...
                  </>
                ) : (
                  <>
                    Analisar <Sparkles className="h-3.5 w-3.5" />
                  </>
                )}
              </Button>
            </form>
          </Form>
        </div>
        <div className="lg:col-start-5 p-4">
          <Classification status={status} />
        </div>
      </Card>
    </PageLayout>
  );
}
